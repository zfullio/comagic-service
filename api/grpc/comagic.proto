syntax = "proto3";

package comagic;

option go_package = "./pb";

// The comagic service definition.
service ComagicService {
  rpc PushCallsToBQ(PushCallsToBQRequest) returns(PushCallsToBQResponse); // Отправка звонков в BigQuery
  rpc PushOfflineMessagesToBQ(PushOfflineMessagesToBQRequest) returns(PushOfflineMessagesToBQResponse); // Отправка заявок в BigQuery
  rpc GetCampaigns(GetCampaignsRequest) returns(GetCampaignsResponse);  // Не реализовано
  rpc GetCampaignsConditions(GetCampaignsConditionsRequest) returns(GetCampaignsConditionsResponse); // Не реализовано
}

//Конфигурация для BigQuery
message BqConfig{
  string project_id = 1;
  string dataset_id = 2;
  string table_id = 3;
  string service_key = 4; // Название файла сервисного ключа
}

//Конфигурация для CloudStorage
message CsConfig{
  string service_key = 1;
  string bucket_name = 2; // Название файла сервисного ключа
}

message Period{
  string date_from = 1;
  string date_till = 2;
}

message PushCallsToBQRequest{
  string comagic_token = 1; // required
  BqConfig bq_config = 2; // required Конфигурация для BigQuery
  CsConfig cs_config = 3; // required Конфигурация для CloudStorage
  Period period = 4; // required
}

message PushCallsToBQResponse{
  bool is_ok = 1;
}

message PushOfflineMessagesToBQRequest{
  string comagic_token = 1; // required
  BqConfig bq_config = 2; // required Конфигурация для BigQuery
  CsConfig cs_config = 3; // required Конфигурация для CloudStorage
  Period period = 4; // required
}

message PushOfflineMessagesToBQResponse{
  bool is_ok = 1;
}

message GetCampaignsRequest{
  string comagic_token = 1;
}

message GetCampaignsResponse{

}

message GetCampaignsConditionsRequest{
  string comagic_token = 1;
}

message GetCampaignsConditionsResponse{

}



